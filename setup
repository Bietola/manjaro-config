#!/bin/sh

# TODO: add `--force/-f` flag

set -u

# To avoid confusion...
TRUE=1
FALSE=0

###################
# Parse arguments #
###################

USAGE_1="Usage 1: setup help"
USAGE_2="Usage 2: setup [-f] USER_HOME_DIRECTORY CENTRAL_CONFIG_DIR SYSTEM_CONFIG_HOME_DIR"
USAGE_3="Usage 3: setup [-f] user USER"
USAGE_MSG="$USAGE_1\n$USAGE_2\n$USAGE_3"

if [[ "$1" == "help" ]]; then
    echo -e "$USAGE_MSG"
    exit 0
fi

# Simplified "user" mode.
# All information are deducted a given user name, assuming a normal linux config layout.
if [[ "$1" == "user" ]]; then
    if [[ $# -ne 2 ]]; then
        echo -e "$USAGE_MSG"
        exit 1
    fi

    if [[ "$2" == "root" ]]; then
        USR_HOME="/root"
    else
        USR_HOME="/home/$2"
    fi
    CONF_REP="$USR_HOME/config"
    CONF_HOME="$USR_HOME/.config"
# Normal usage: all paths meticulously specified.
else
    if [[ $# -ne 3 ]]; then
        echo -e "$USAGE_MSG"
        exit 1
    fi

    USR_HOME="$1"
    CONF_REP="$2"
    CONF_HOME="$3"
fi

# Backup directory: For overriding old configs in case of forced update.
BU_DIR="$CONF_REP/bu"

# Where all the dotfiles are.
DOTS_DIR="$CONF_REP/dotfiles"

# Backup folder


####################
# Helper functions #
####################

# Error reporting
function error() {
    echo "Error: $ERR"
}

function backup() {
    echo "BU not implemented yet"
}

# Buffed symlink function
function dolink() {
    orig=${1:?"Link origin required"}
    dest=${2:?"Link destination requied"}

    echo "Setting up $unit_name at $dest"
    # TODO: Make calling haskell scripts easier
    $CONF_REP/utils/hs/stack-proj/src/symlink-w-tree/symlink-w-tree.hs "$orig" "$dest"
}

# Even more buffed symlink function (does heavylifting)
function lncfg() {
    local do_hardcopy=$FALSE

    function dosync() {
        if [[ $do_hardcopy -eq $FALSE ]]; then
            dolink $@
        else
            local unit="$(basename $orig)"
            echo "Setting up $unit to $dest..."

            local orig="$1"
            local dest="$2"
            if [[ -d "$orig" ]]; then
                cp -r "$orig" "$dest"
            else
                cp "$orig" "$dest"
            fi

        fi
    }

    # Parse options
    while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
        -h | --hardcopy )
            do_hardcopy=$TRUE
            ;;
        *)
            err="Unspecified flag to function *lncfg*: $1"
            return 1
            ;;
    esac; shift; done
    [[ "$1" == '--' ]] && shift

    # Collect args
    dest_specifier="$1"
    unit_name="$2"

    # Determine origin of config unit (unit is shorthand for file/directory)
    orig="$DOTS_DIR/$unit_name"
    orig=$(readlink -f "$orig") # TODO: Danger: $() call should probably be wrapped in quotes

    # Determine destination of config unit
    case "$dest_specifier" in
        # Parse shorthands
        ":fp")
            FLATPAK_CONFIG_LOCATION="$3"
            dest="$USR_HOME/$FLATPAK_CONFIG_LOCATION/$unit_name"
            ;;
        ":h")
            dest="$USR_HOME/$unit_name"
            ;;
        ":c")
            dest="$CONF_HOME/$unit_name"
            ;;
        ":e")
            dest="/etc/$unit_name"
            ;;
        # Parse as full path
        *)
            dest="$dest_specifier"
            ;;
    esac

    # Fatal error: config unit does not exist in rep
    if [[ ! -e "$orig" ]]; then
        ERR="$unit_name does not exist in config repository (should be located at $orig)."
        return 1
    fi

    # Symlink is already present
    if [[ -h "$dest" ]]; then
        # Symlink is already there and points to the correct destination
        old_orig=$(readlink -f "$dest")
        [[ -z "$old_orig" ]] && old_orig="<INVALID_SYMLINK>"

        if [[ "$old_orig" == "$orig" ]]; then
            echo "Nothing to be done for $unit_name"
        # Destination is wrong...
        else
            echo "Skipping $unit_name: destination config at $dest already contains symlink to other file: $old_orig. Please remove it and rerun the command."
        fi
    # Don't do anything if a config unit is already present at destination
    elif [[ -e "$dest" ]]; then
        echo "Warning: $unit_name real conf directory already exists at $dest. Please remove it and rerun setup."
    # All is fine
    else
        # Do it
        dosync "$orig" "$dest"
    fi
}

function lncfge() {
    lncfg $@ || error
}

#####################################################################
# Symlink configuration directories/files to their proper locations #
#####################################################################

######################################################
# Setup through hard-link is not implemented for now #
######################################################

# wpa_supplicant
# NB. contains info (pw and ssid) for connecting to wifi network
# lncfge -h :e wpa_supplicant

# blacklisted modules
# TODO: Add this when Haskell implementation is over
# NB. this is for making sound work, for **linux-sof** modules to make the mic work, older sound modules
#     need to be blacklisted.
# lncfge -h :e modprobe.d

# mkinitcpio
#
# Essential edits from original:
#   - MODULES array changed to enable early KMS start for Intel Grpahics GPU (https://wiki.archlinux.org/index.php/Kernel_mode_setting#Early_KMS_start)
# lncfge -h :e mkinitcpio.conf
#
# boxes (the ones used for block comments)
# lncfge -h :e "boxes-config"

# Modified to make realtime audio support possible
# lncfge -h /etc/security limits.conf

# talon
#
# NB. This needs to be hard for scripts hot realoading to work
lncfge -h :h ".talon/user"
echo "NB. Only .talon/user is put into place by \`setup\`. For full talon setup instructions, go to the Talon Voice website."

# bashrc
lncfge :h ".bashrc"

# xprofile
lncfge :h ".xprofile"

# asoundrc
# NB. This is here mainly to make bluealsa work
lncfge :h ".asoundrc"

# gitconfig
lncfge :h ".gitconfig"

# neovim
lncfge :c nvim

# ranger
lncfge :c ranger

# sxhkd
lncfge :c sxhkd

# xmonad
lncfge :h ".xmonad"

# qutebrowser
lncfge :c qutebrowser

# haskeline
lncfge :h ".haskeline"

# dunst
lncfge :c dunst

# rclone
lncfge :c rclone

# alacritty
lncfge :c alacritty

# vim plugin configs
# LEGACY: Used to be needed by nixos
# lncfge :c nvim/coc-settings.json
# lncfge :c nvim/UltiSnips
